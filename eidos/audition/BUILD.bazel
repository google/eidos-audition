# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auditory libraries and tools.

package(default_visibility = [
    "//eidos:__subpackages__",
    "//third_party/audition:__subpackages__",
])

proto_library(
    name = "waveform_proto",
    srcs = ["waveform.proto"],
)

cc_proto_library(
    name = "waveform_cc_proto",
    deps = [":waveform_proto"],
)

cc_library(
    name = "waveform_utils",
    srcs = ["waveform_utils.cc"],
    hdrs = ["waveform_utils.h"],
    deps = [
        ":waveform_cc_proto",
        "//eidos/port:logging",
        "@com_github_wave//:wave",
        "@com_google_absl//absl/strings",
    ],
)

cc_test(
    name = "waveform_utils_test",
    srcs = ["waveform_utils_test.cc"],
    data = ["//eidos/audition/testdata/ne_np:audio"],
    deps = [
        ":waveform_cc_proto",
        ":waveform_utils",
        "@com_google_googletest//:gtest_main",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "utils",
    srcs = ["utils.cc"],
    hdrs = ["utils.h"],
    deps = ["//eidos/port:logging"],
)

cc_test(
    name = "utils_test",
    srcs = ["utils_test.cc"],
    deps = [
        ":utils",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "psychoacoustic_scale_utils",
    srcs = ["psychoacoustic_scale_utils.cc"],
    hdrs = ["psychoacoustic_scale_utils.h"],
)

cc_test(
    name = "psychoacoustic_scale_utils_test",
    srcs = ["psychoacoustic_scale_utils_test.cc"],
    deps = [
        ":psychoacoustic_scale_utils",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "fractional_gaussian_noise_test",
    srcs = ["fractional_gaussian_noise_test.cc"],
    deps = [
        "//third_party/audition/models/bruce_carney:fractional_gaussian_noise",
        "@com_gitlab_eigen//:eigen",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "windowing",
    srcs = ["windowing.cc"],
    hdrs = ["windowing.h"],
    visibility = ["//visibility:private"],
    deps = [
        ":stimulus_config_cc_proto",
        "//eidos/port:logging",
        "@com_gitlab_eigen//:eigen",
    ],
)

cc_test(
    name = "windowing_test",
    srcs = ["windowing_test.cc"],
    deps = [
        ":stimulus_config_cc_proto",
        ":windowing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "resampler",
    srcs = ["resampler.cc"],
    hdrs = ["resampler.h"],
    visibility = ["//visibility:private"],
    deps = [
        ":stimulus_config_cc_proto",
        "//eidos/port:logging",
        "@com_github_resample//:resample",
        "@com_gitlab_eigen//:eigen",
    ],
)

cc_test(
    name = "resampler_test",
    srcs = ["resampler_test.cc"],
    deps = [
        ":resampler",
        ":stimulus_config_cc_proto",
        "@com_google_googletest//:gtest_main",
    ],
)

proto_library(
    name = "auditory_model_config_proto",
    srcs = ["auditory_model_config.proto"],
    deps = ["@com_google_protobuf//:any_proto"],
)

cc_proto_library(
    name = "auditory_model_config_cc_proto",
    deps = [":auditory_model_config_proto"],
)

cc_library(
    name = "auditory_model",
    srcs = ["auditory_model.cc"],
    hdrs = ["auditory_model.h"],
    deps = [
        ":auditory_model_config_cc_proto",
        ":stimulus_config_cc_proto",
        "@com_gitlab_eigen//:eigen",
    ],
)

cc_test(
    name = "auditory_model_test",
    srcs = ["auditory_model_test.cc"],
    deps = [
        ":auditory_model",
        ":auditory_model_config_cc_proto",
        ":stimulus_config_cc_proto",
        "@com_gitlab_eigen//:eigen",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "auditory_response",
    srcs = ["auditory_response.cc"],
    hdrs = ["auditory_response.h"],
    deps = [
        ":auditory_model",
        ":auditory_model_config_cc_proto",
        "//eidos/port:logging",
        "@com_github_cnpy//:cnpy",
        "@com_gitlab_eigen//:eigen",
        "@net_zlib//:zlib",
    ],
)

cc_test(
    name = "auditory_response_test",
    srcs = ["auditory_response_test.cc"],
    deps = [
        ":auditory_response",
        "@com_gitlab_eigen//:eigen",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

proto_library(
    name = "auditory_pipeline_config_proto",
    srcs = ["auditory_pipeline_config.proto"],
    deps = [":auditory_model_config_proto"],
)

cc_proto_library(
    name = "auditory_pipeline_config_cc_proto",
    deps = ["auditory_pipeline_config_proto"],
)

cc_library(
    name = "auditory_pipeline",
    srcs = ["auditory_pipeline.cc"],
    hdrs = ["auditory_pipeline.h"],
    visibility = ["//visibility:private"],
    deps = [
        ":auditory_model",
        ":auditory_model_config_cc_proto",
        ":auditory_pipeline_config_cc_proto",
        ":auditory_response",
        ":carfac_config_cc_proto",
        ":carfac_model",
        ":gammatone_filterbank_config_cc_proto",
        ":mock_basilar_membrane_model",
        ":stimulus_config_cc_proto",
        ":sumner2002_hair_cell_synapse_config_cc_proto",
        ":zhang2001_spike_generator_config_cc_proto",
        "//eidos/port:logging",
        "//third_party/audition/models/amt:meddis1986_hair_cell_synapse_model",
        "//third_party/audition/models/baumgarte:baumgarte_model",
        "//third_party/audition/models/bruce_carney:bruce2018_hair_cell_synapse_model",
        "//third_party/audition/models/bruce_carney:bruce2018_spike_generator",
        "//third_party/audition/models/bruce_carney:jackson_spike_generator",
        "//third_party/audition/models/bruce_carney:zhang2001_spike_generator",
        "//third_party/audition/models/bruce_carney:zilany2014_ihc_model",
        "//third_party/audition/models/dsam:sumner2002_hair_cell_synapse_model",
        "//third_party/audition/models/gammatone:gammatone_filterbank_model",
        "@com_gitlab_eigen//:eigen",
        "@com_google_absl//absl/memory",
    ],
)

cc_test(
    name = "auditory_pipeline_test",
    srcs = ["auditory_pipeline_test.cc"],
    deps = [
        ":auditory_model",
        ":auditory_model_config_cc_proto",
        ":auditory_pipeline",
        ":auditory_pipeline_config_cc_proto",
        ":auditory_response",
        ":stimulus_config_cc_proto",
        "@com_gitlab_eigen//:eigen",
        "@com_google_googletest//:gtest_main",
    ],
)

proto_library(
    name = "stimulus_config_proto",
    srcs = ["stimulus_config.proto"],
)

cc_proto_library(
    name = "stimulus_config_cc_proto",
    deps = [":stimulus_config_proto"],
)

cc_library(
    name = "mock_basilar_membrane_model",
    srcs = ["mock_basilar_membrane_model.cc"],
    hdrs = ["mock_basilar_membrane_model.h"],
    visibility = ["//visibility:private"],
    deps = [
        ":auditory_model",
        ":auditory_model_config_cc_proto",
        ":psychoacoustic_scale_utils",
        ":stimulus_config_cc_proto",
        "@com_gitlab_eigen//:eigen",
    ],
)

cc_test(
    name = "mock_basilar_membrane_model_test",
    srcs = ["mock_basilar_membrane_model_test.cc"],
    deps = [
        ":mock_basilar_membrane_model",
        ":stimulus_config_cc_proto",
        "@com_gitlab_eigen//:eigen",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "baumgarte_model_test",
    srcs = ["baumgarte_model_test.cc"],
    data = [
        "testdata/auditory/1kHz_60dB_SPL_tone.wav",
        "testdata/auditory/1kHz_60dB_SPL_tone_baumgarte.exc",
        "testdata/auditory/impulse_1000at0s_and_-1000at0.05s.wav",
        "testdata/auditory/impulse_1000at0s_and_-1000at0.05s_baumgarte.exc",
    ],
    deps = [
        ":stimulus_config_cc_proto",
        ":waveform_cc_proto",
        ":waveform_utils",
        "//eidos/port:logging",
        "//third_party/audition/models/baumgarte:baumgarte_model",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "bruce2018_spike_generator_test",
    srcs = ["bruce2018_spike_generator_test.cc"],
    deps = [
        ":gammatone_filterbank_config_cc_proto",
        ":stimulus_config_cc_proto",
        ":utils",
        "//third_party/audition/models/amt:meddis1986_hair_cell_synapse_model",
        "//third_party/audition/models/bruce_carney:bruce2018_spike_generator",
        "//third_party/audition/models/gammatone:gammatone_filterbank_model",
        "@com_gitlab_eigen//:eigen",
        "@com_google_googletest//:gtest_main",
    ],
)

proto_library(
    name = "carfac_config_proto",
    srcs = ["carfac_config.proto"],
)

cc_proto_library(
    name = "carfac_config_cc_proto",
    deps = [":carfac_config_proto"],
)

cc_library(
    name = "carfac_model",
    srcs = ["carfac_model.cc"],
    hdrs = ["carfac_model.h"],
    visibility = ["//visibility:private"],
    deps = [
        ":auditory_model",
        ":auditory_model_config_cc_proto",
        ":carfac_config_cc_proto",
        ":stimulus_config_cc_proto",
        "//eidos/port:logging",
        "@com_gitlab_eigen//:eigen",
        "@com_google_carfac//:carfac",
    ],
)

cc_test(
    name = "carfac_model_test",
    srcs = ["carfac_model_test.cc"],
    deps = [
        ":carfac_config_cc_proto",
        ":carfac_model",
        ":stimulus_config_cc_proto",
        "//eidos/port:logging",
        "@com_google_googletest//:gtest_main",
    ],
)

proto_library(
    name = "gammatone_filterbank_config_proto",
    srcs = ["gammatone_filterbank_config.proto"],
)

cc_proto_library(
    name = "gammatone_filterbank_config_cc_proto",
    deps = [":gammatone_filterbank_config_proto"],
)

cc_test(
    name = "gammatone_filterbank_model_test",
    srcs = ["gammatone_filterbank_model_test.cc"],
    deps = [
        ":stimulus_config_cc_proto",
        "//third_party/audition/models/gammatone:gammatone_filterbank_model",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "zilany2014_ihc_model_test",
    srcs = ["zilany2014_ihc_model_test.cc"],
    deps = [
        ":stimulus_config_cc_proto",
        "//eidos/port:logging",
        "//third_party/audition/models/bruce_carney:zilany2014_ihc_model",
        "@com_google_googletest//:gtest_main",
    ],
)

proto_library(
    name = "zhang2001_spike_generator_config_proto",
    srcs = ["zhang2001_spike_generator_config.proto"],
)

cc_proto_library(
    name = "zhang2001_spike_generator_config_cc_proto",
    deps = [":zhang2001_spike_generator_config_proto"],
)

cc_test(
    name = "zhang2001_spike_generator_test",
    srcs = ["zhang2001_spike_generator_test.cc"],
    deps = [
        "//third_party/audition/models/bruce_carney:zhang2001_spike_generator",
        "@com_gitlab_eigen//:eigen",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "meddis1986_hair_cell_synapse_model_test",
    srcs = ["meddis1986_hair_cell_synapse_model_test.cc"],
    deps = [
        ":gammatone_filterbank_config_cc_proto",
        ":stimulus_config_cc_proto",
        "//third_party/audition/models/amt:meddis1986_hair_cell_synapse_model",
        "//third_party/audition/models/baumgarte:baumgarte_model",
        "//third_party/audition/models/gammatone:gammatone_filterbank_model",
        "@com_google_googletest//:gtest_main",
    ],
)

proto_library(
    name = "sumner2002_hair_cell_synapse_config_proto",
    srcs = ["sumner2002_hair_cell_synapse_config.proto"],
)

cc_proto_library(
    name = "sumner2002_hair_cell_synapse_config_cc_proto",
    deps = [":sumner2002_hair_cell_synapse_config_proto"],
)

cc_test(
    name = "sumner2002_hair_cell_synapse_model_test",
    srcs = ["sumner2002_hair_cell_synapse_model_test.cc"],
    deps = [
        ":gammatone_filterbank_config_cc_proto",
        ":sumner2002_hair_cell_synapse_config_cc_proto",
        "//third_party/audition/models/dsam:sumner2002_hair_cell_synapse_model",
        "//third_party/audition/models/gammatone:gammatone_filterbank_model",
        "@com_gitlab_eigen//:eigen",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "bruce2018_hair_cell_synapse_model_test",
    srcs = ["bruce2018_hair_cell_synapse_model_test.cc"],
    deps = [
        ":mock_basilar_membrane_model",
        ":stimulus_config_cc_proto",
        "//third_party/audition/models/baumgarte:baumgarte_model",
        "//third_party/audition/models/bruce_carney:bruce2018_hair_cell_synapse_model",
        "@com_gitlab_eigen//:eigen",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "jackson_spike_generator_test",
    srcs = ["jackson_spike_generator_test.cc"],
    deps = [
        ":gammatone_filterbank_config_cc_proto",
        ":stimulus_config_cc_proto",
        ":utils",
        "//third_party/audition/models/amt:meddis1986_hair_cell_synapse_model",
        "//third_party/audition/models/bruce_carney:jackson_spike_generator",
        "//third_party/audition/models/gammatone:gammatone_filterbank_model",
        "@com_google_googletest//:gtest_main",
    ],
)

proto_library(
    name = "auditory_feature_extractor_config_proto",
    srcs = ["auditory_feature_extractor_config.proto"],
    deps = [
        ":auditory_pipeline_config_proto",
        ":stimulus_config_proto",
    ],
)

cc_proto_library(
    name = "auditory_feature_extractor_config_cc_proto",
    deps = [":auditory_feature_extractor_config_proto"],
)

cc_library(
    name = "auditory_feature_extractor-lib",
    srcs = ["auditory_feature_extractor.cc"],
    hdrs = ["auditory_feature_extractor.h"],
    deps = [
        ":auditory_feature_extractor_config_cc_proto",
        ":auditory_pipeline",
        ":auditory_response",
        ":resampler",
        ":waveform_cc_proto",
        ":waveform_utils",
        ":windowing",
        "//eidos/port:logging",
    ],
)

cc_test(
    name = "auditory_feature_extractor_test",
    srcs = ["auditory_feature_extractor_test.cc"],
    data = ["//eidos/audition/testdata/ne_np:audio"],
    shard_count = 3,
    deps = [
        ":auditory_feature_extractor-lib",
        ":auditory_feature_extractor_config_cc_proto",
        ":auditory_response",
        ":waveform_cc_proto",
        ":waveform_utils",
        "@com_gitlab_eigen//:eigen",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_binary(
    name = "auditory_feature_extractor",
    srcs = ["auditory_feature_extractor_main.cc"],
    deps = [
        ":auditory_feature_extractor-lib",
        ":auditory_model_config_cc_proto",
        ":auditory_pipeline_config_cc_proto",
        ":auditory_response",
        ":waveform_cc_proto",
        ":waveform_utils",
        "//eidos/port:logging",
        "//eidos/utils:proto_utils",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "auditory_feature_extractor_config_tester",
    testonly = 1,
    srcs = ["auditory_feature_extractor_config_tester.cc"],
    visibility = ["//eidos/audition/configs:__subpackages__"],
    deps = [
        ":auditory_feature_extractor-lib",
        ":auditory_model_config_cc_proto",
        ":auditory_response",
        ":waveform_cc_proto",
        "//eidos/port:status-matchers",
        "//eidos/utils:proto_utils",
        "@com_gitlab_eigen//:eigen",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_googletest//:gtest",
    ],
)

py_test(
    name = "auditory_feature_extractor_e2e_test",
    srcs = ["auditory_feature_extractor_e2e_test.py"],
    data = [
        ":auditory_feature_extractor",
        ":testdata/configs/feature_extractor_config.textproto",
        "//eidos/audition/testdata/ne_np:audio",
    ],
    python_version = "PY3",
    srcs_version = "PY3",
)

py_binary(
    name = "visualize_auditory_signals",
    srcs = ["visualize_auditory_signals.py"],
    python_version = "PY3",
    srcs_version = "PY3",
    deps = [
        "@io_abseil_py//absl:app",
        "@io_abseil_py//absl/flags",
        "@io_abseil_py//absl/logging",
    ],
)

py_test(
    name = "visualize_auditory_signals_e2e_test",
    srcs = ["visualize_auditory_signals_e2e_test.py"],
    data = [
        "testdata/auditory/1kHz_60dB_SPL_tone_baumgarte.npy",
        ":visualize_auditory_signals",
    ],
    python_version = "PY3",
    srcs_version = "PY3",
)

# Local Variables:
# mode: python
# End:
